import os
from flask import Flask, render_template, request
import numpy as np
from PIL import Image
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.preprocessing.image import load_img
from tensorflow.keras.models import load_model
import shutil



app = Flask(__name__)

APP_ROOT = os.path.dirname(os.path.abspath(__file__))

@app.route('/')
def index():
   return render_template('index.html')


#@app.route('/predict',method = ['GET'])
def predict(destination,F_name):
    print(F_name)
    path2= "D:\Sea of Programming\Malware Detection Project\Our Work\TheModel\Malware-Detection-using-Deep-Learning-master\Testing _img_target/"
    if F_name[-1:-5:-1]!=".bmp" or F_name[-1:-5:-1]!=".png":
        image = np.zeros((224,224))
        i,j,p=0,0,0
        path = destination
        #dirs = os.listdir( path ) ## gets all the directories in the given folder.
        image = np.zeros((256,256))
        with open(path, "rb") as f: ## read byte mode
            byte = f.read(1)  ## reading 1 byte at a time. returns a byte object.
            i,j,p=0,0,0
            while byte != b"": ## itereating till the end of the file
                # print (ord(byte),byte) ## ord gives ASCII value of that char.
                if(i<256):
                    if(byte.decode("utf-8",errors='ignore')==' ' or byte.decode("utf-8",errors='ignore')=='\r' or byte.decode("utf-8",errors='ignore')=='\n' or byte.decode("utf-8",errors='ignore')=='?' ):
                        byte = f.read(1)
                        continue
                    # image[i][p]=0
                    #print (byte.decode("utf-8"),int(byte.decode("utf-8"),16),i)
                    if(j>8):
                        image[i][p]= int(str(ord(byte)),16) ## byte.decode gives the value of the byte object which is converted into hexa-decimal.
                        p=p+1
                    j=j+1
                    if(p>255):
                        p=0
                        j=0
                        i=i+1
                byte = f.read(1)
            #a=np.matrix(image)
            # a=np.matrix(image)
            #temp1=a
            img = Image.fromarray(image, 'L') ## makes 2D array into an image. L-> The kind of pixel (8-bit pixel black and white)
            #img.show()
            #try:
            img.save(path2+F_name[0:-6]+".bmp")
    else:
        fileList = [destination]
        for item in fileList:
            shutil.copy(item, path2)
    BS = 1
    print("[INFO] loading File "+F_name +" Please Wait...")
    
    data = []
    File_Name = []
    File_Name.append(F_name[0:-6]+".bmp")
    #img_path = os.path.join(path2, img)
    image = load_img(path2+F_name[0:-6]+".bmp", target_size=(224, 224))
    image = img_to_array(image)
    image = preprocess_input(image)
    data.append(image)

    
    data = np.array(data, dtype="float32")
    
    
    MalNet = load_model("malwaredetector.model")
    # compile our model
    print("[INFO] Predicting FILE...")
    
    predIdxs = MalNet.predict(data, batch_size=BS)
    
    predIdxs = np.argmax(predIdxs, axis=1)
    result = " Malware File" if predIdxs[0] else " Benign File"
    print(F_name+" is"+result)
    return predIdxs[0]
        
	
@app.route('/uploader', methods = ['POST'])
def upload():
   target = os.path.join(APP_ROOT, 'Temporary_loc/')
   print(target)
   
   if not os.path.isdir(target):
       os.mkdir(target)
       
   for file in request.files.getlist("file"):
       print(file)
       filename = file.filename
       destination = "/".join([target,filename])
       print(destination)
       file.save(destination)
       ans = predict(destination,file.filename)
       if ans:
            return render_template("complete.html")
       else:
            return render_template("complete2.html")


if __name__ == '__main__':
   app.run(port = 4555, debug = True)
   
   
   
   